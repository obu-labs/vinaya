name: Deploy Hugo site to Pages
# This workflow is a fork of https://gohugo.io/host-and-deploy/host-on-github-pages/
# If it stops working, maybe check there for any updates?
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
# Default to bash
defaults:
  run:
    shell: bash
jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.147.9
      HUGO_ENVIRONMENT: production
      TZ: Asia/Bangkok
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get latest release tag name from JSON
          VERSION=$(gh api repos/sass/dart-sass/releases/latest --jq .tag_name)

          # Build file and download URL
          FILE="dart-sass-${VERSION}-linux-x64.tar.gz"
          URL="https://github.com/sass/dart-sass/releases/download/${VERSION}/${FILE}"

          # Download and extract
          cd ${{ runner.temp }}
          curl -L -o $FILE $URL
          tar -xzf $FILE

          # Install binaries
          sudo mv dart-sass/* /usr/local/bin/
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Vault Builder Cache Restore
        id: vault-cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            vaultbuilder/data
          key: vaultbuilder-${{ github.run_id }}
          restore-keys:
            vaultbuilder-
      - name: Build the Vault
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          pip install -r vaultbuilder/requirements.txt
          mkdir -p static
          python vaultbuilder/generate_vault.py
      - name: Vault Cache Save
        id: vault-cache-save
        uses: actions/cache/save@v4
        with:
          path: |
            vaultbuilder/data
          key: ${{ steps.vault-cache-restore.outputs.cache-primary-key }}
      - name: Fill in Dynamic Variables
        run: |
          today_version="v$(date +%Y.%m.%d)"
          sed -i "s/{{TODAY_VERSION}}/${today_version}/g" data/landing.yaml
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Hugo Cache Restore
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ runner.temp }}/hugo_cache
          key: hugo-${{ github.run_id }}
          restore-keys:
            hugo-
      - name: Configure Git
        run: git config core.quotepath false
      - name: Build with Hugo
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/" \
            --cacheDir "${{ runner.temp }}/hugo_cache"
      - name: Hugo Cache Save
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ runner.temp }}/hugo_cache
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Invalidate the CloudFlare Cache
        shell: bash
        run: |
          echo "Hitting the CloudFlare API..."
          HTTP_RESPONSE=$(curl -sSX POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE }}/purge_cache" -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" -H "Content-Type:application/json" -w "HTTP_STATUS:%{http_code}" --data '{"prefixes":["labs.buddhistuniversity.net/vinaya"]}')
          HTTP_BODY=$(echo "${HTTP_RESPONSE}" | sed -E 's/HTTP_STATUS\:[0-9]{3}$//')
          HTTP_STATUS=$(echo "${HTTP_RESPONSE}" | tr -d '\n' | sed -E 's/.*HTTP_STATUS:([0-9]{3})$/\1/')
          if [ "${HTTP_STATUS}" -eq "200" ]; then
            SUCCESS=$(echo ${HTTP_BODY} | python3 -c "import sys, json;print(json.load(sys.stdin)['success'])")
            if [ "${SUCCESS}" = "True" ]; then
              echo "Successfully purged!"
              echo "::group::Raw response"
              echo "${HTTP_BODY}"
              echo "::endgroup::"
              exit 0
            else
              echo "Unsuccessful purge!"
              echo "API response was:"
              echo "${HTTP_BODY}"
              exit 1
            fi
          else
            echo "Request failed. API response was ($HTTP_STATUS): "
            echo "${HTTP_BODY}"
            exit 1
          fi
